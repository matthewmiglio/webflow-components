<!-- Plinko Popup -->
<div id="plinkoPopup" style="display:none; position:fixed; top:0; left:0; width:100vw; height:100vh; background:transparent; z-index:9999; display:flex; align-items:center; justify-content:center;">
  <div id="plinkoWrapper" style="background:#fff; padding:20px; border-radius:16px; box-shadow:0 0 20px rgba(0,0,0,0.2); display:flex; flex-direction:column; align-items:center; max-width:480px; width:90vw;">
   <!-- Full-width logo at top -->
<img
  src="https://cdn.prod.website-files.com/67eb053f349675aae967d272/67eeaecdad26ce80e722789a_logo.png"
  alt="Logo"
  style="width: 100%; height: auto; margin-bottom: 16px; object-fit: contain;">

   <canvas id="plinkoCanvas" style="border-radius:10px; width:100%; height:auto;" width="400" height="600"></canvas>
    <div style="margin-top:16px; display:flex; gap:10px; flex-wrap:wrap; justify-content:center;">
      <button id="replayBtn" onclick="replayPlinko()" style="background:#111; color:#fff; border:none; padding:10px 18px; border-radius:6px; font-weight:600; cursor:pointer; transition:0.2s;">Replay</button>
      <button onclick="closePlinko()" style="background:#666; color:#fff; border:none; padding:10px 18px; border-radius:6px; font-weight:500; cursor:pointer; transition:0.2s;">Close</button>
    </div>
    <div id="resultText" style="margin-top:14px; color:#111; font-weight:500;"></div>
  </div>
</div>


<!-- Matter.js -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/matter-js/0.19.0/matter.min.js"></script>

<script>
  let engine, render, runner, world, ball, bins = [], canvasWidth = 400, canvasHeight = 600;

  setTimeout(() => {
    document.getElementById("plinkoPopup").style.display = "flex";
    startPlinko();
  }, 0);

  function closePlinko() {
    document.getElementById("plinkoPopup").style.display = "none";
    Matter.Render.stop(render);
    Matter.Runner.stop(runner);
  }

  function replayPlinko() {
    closePlinko();
    setTimeout(() => {
      document.getElementById("plinkoPopup").style.display = "flex";
      startPlinko();
    }, 300);
  }

  function startPlinko() {
    const { Engine, Render, Runner, World, Bodies, Events } = Matter;

    engine = Engine.create();
    world = engine.world;

    const canvas = document.getElementById('plinkoCanvas');
    render = Render.create({
      canvas: canvas,
      engine: engine,
      options: {
        width: canvasWidth,
        height: canvasHeight,
        wireframes: false,
        background: 'linear-gradient(180deg, #ffffff 0%, #e0f7ff 100%)'

      }
    });

    Render.run(render);
    runner = Runner.create();
    Runner.run(runner, engine);

    const wallOptions = { isStatic: true, render: { fillStyle: '#111' } };
    World.add(world, [
      Bodies.rectangle(canvasWidth / 2, 0, canvasWidth, 5, wallOptions),
      Bodies.rectangle(canvasWidth / 2, canvasHeight, canvasWidth, 5, wallOptions),
      Bodies.rectangle(0, canvasHeight / 2, 5, canvasHeight, wallOptions),
      Bodies.rectangle(canvasWidth, canvasHeight / 2, 5, canvasHeight, wallOptions)
    ]);

    const binCount = 9;
    const binWidth = canvasWidth / binCount;



const binColors = ['#FF0000', '#FF7F00', '#FFFF00', '#00FF00', '#0000FF', '#4B0082', '#8B00FF', '#FF1493', '#00CED1'];
const binLabels = ['x0.5', 'x1', 'x1.5', 'x2', 'x3', 'x2', 'x1.5', 'x1', 'x0.5'];

const canvasOffsetLeft = canvas.getBoundingClientRect().left;
const canvasOffsetTop = canvas.getBoundingClientRect().top;

const binThickness = 10;
const edgePadding = binThickness / 2;

for (let i = 0; i <= binCount; i++) {
  const x = i * binWidth;
  // Clamp to avoid touching canvas edges
  const clampedX = Math.max(edgePadding, Math.min(canvasWidth - edgePadding, x));

  const bin = Bodies.rectangle(clampedX, canvasHeight - 20, binThickness, 80, {
    isStatic: true,
    render: { fillStyle: binColors[i % binColors.length] }
  });





  bins.push(bin);
  World.add(world, bin);

  // Add HTML text below each bin
  const label = document.createElement('div');
  label.textContent = binLabels[i % binLabels.length];
  label.style.position = 'absolute';
  label.style.top = `${canvasOffsetTop + canvasHeight - 5}px`;
  label.style.left = `${canvasOffsetLeft + i * binWidth - 12}px`;
  label.style.color = '#111';
  label.style.fontSize = '12px';
  label.style.fontWeight = 'bold';
  label.style.pointerEvents = 'none';
  label.style.userSelect = 'none';
  document.body.appendChild(label);
}








    const pegOffsetX = 25;
    for (let row = 0; row < 6; row++) {
      for (let col = 0; col < 8; col++) {
        const offset = row % 2 === 0 ? pegOffsetX : 0;
        const x = 50 * col + offset;
        if (x > 20 && x < canvasWidth - 20) {
          const peg = Bodies.circle(x, 100 + row * 60, 1, {
            isStatic: true,
            render: {
              fillStyle: '#bbb',
              strokeStyle: '#999',
              lineWidth: 1
            }
          });
          World.add(world, peg);
        }
      }
    }

    function getRandomX() {
      let x;
      do {
        x = Math.floor(Math.random() * (360 - 40 + 1)) + 40;
      } while (x > 180 && x < 220);
      return x;
    }

    ball = Bodies.circle(getRandomX(), 30, 12, {
      restitution: 0.6,
      render: { fillStyle: '#f00' }
    });
    World.add(world, ball);

    Events.on(engine, 'afterUpdate', function () {
      if (ball.position.y > canvasHeight - 60) {
        const binIndex = Math.floor(ball.position.x / binWidth);
        document.getElementById('resultText').textContent = `You landed in bin #${binIndex + 1}!`;
      }
    });
  }
</script>
